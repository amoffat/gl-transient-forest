import * as host from "@gl/api/w2h/host";
import { String } from "@gl/types/i18n";
import * as timeUtils from "@gl/utils/time";
import * as userDialogue from "../main";

const log = host.debug.log;
const logError = host.debug.logError;

{% for cls in state_classes %}
{{cls}}
{% endfor %}

export const state = new State();
const visitCount = new Map<string, u32>();
const choiceToPassage = new Map<string, string>();
{% for choice_id, pid in choice_to_passage.items() -%}
choiceToPassage.set("{{choice_id}}", "{{pid}}");
{% endfor %}


function isNight(): bool {
    const ev = host.time.getSunEvent();
    return timeUtils.isNight(ev);
}

function isDay(): bool {
    const ev = host.time.getSunEvent();
    return timeUtils.isDay(ev);
}

export function visited(id: string): u32 {
    if (!visitCount.has(id)) {
        return 0;
    }
    const count = visitCount.get(id);
    return count;
}


export function hasVisited(id: string): bool {
    return visitCount.has(id);
}

export function lastVisited(passage: string): u32 {
    return 0;
}

function random(min: f32, max: f32): f32 {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

function randomFloat(min: f32, max: f32): f32 {
    return Math.random() * (max - min) + min;
}

function either<T>(options: T[]): T {
    const idx = Math.floor(Math.random() * options.length) as u32;
    return options[idx];
}

function incrementVisitCount(id: string): void {
    if (!visitCount.has(id)) {
        visitCount.set(id, 0);
    }
    visitCount.set(id, visitCount.get(id) + 1);
}



{% macro passage(p) %}
export function stage_{{p.id}}(entered: bool): void {
    if (entered) {
        host.controls.setButtons([
            {
                label: "interact",
                slug: "passage/{{p.id}}",
            }
        ]);
    } else {
        host.controls.setButtons([]);
    }
}

// {{p.name}}
export function passage_{{p.id}}(): void {
    // {{p.title}}
    const title = "{{p.title_id}}"; 
    const animate = {{"false" if p.is_sign else "true"}};
    let text = "";
    const choices: string[] = [];
    const params = new Map<string, string>();
    incrementVisitCount("{{p.id}}");

{% for line in p.init %}
    {{line}}
{%- endfor %}

{{p.content}}

    if (text.length > 0) {
        host.text.display("{{p.id}}", title, text, choices, params, animate);
    }
}
{% endmacro %}

{% macro stringEntry(key, string) %}
    {
        key: "{{key}}",
        values: [
            {
                "text": {{string}},
                "lang": "en"
            }
        ]
    },
{% endmacro %}

export function strings(): String[] {
    return [
        {{ stringEntry("interact", '"Interact"') }}
    {% for key, string in all_strings.items() %}
        {{ stringEntry(key, string) }}
    {% endfor %}
    ];
}

/**
 * Called when the player interacts with a choice dialog.
 *
 * @param passageId The id of the passage that the user interacted with.
 * @param passageId The id of the choice that the user made.
 */
export function choiceMadeEvent(passageId: string, choiceId: string): void {
    if (choiceId === "") {
        log(`Passage ${passageId} closed.`);
        userDialogue.dialogClosedEvent(passageId);
        return;
    }
    log(`Choice made for ${passageId}: ${choiceId}`);
    if (choiceToPassage.has(choiceId)) {
        choiceId = choiceToPassage.get(choiceId);
    }
    dispatch(choiceId);
}

{% for p in passages %}
{{ passage(p) }}
{% endfor %}

export function dispatch(passageId: string): void {
    let found = false;
    {% for p in passages %}
    if (passageId === "{{p.id}}") {
        found = true;
        passage_{{p.id}}();
    }
    {% endfor %}

    if (!found) {
        log(`No passage found for ${passageId}, does it have content?`);
    }
}