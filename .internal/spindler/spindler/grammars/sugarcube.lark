?start: body

body: (link | _macro | text)+

_macro: wrapping_macro | _callable_macro | if_macro
_callable_macro: "<<" _callable_macros ">>"
wrapping_macro: "<<" _wrap_macros ">>" body "<</" _WORD ">>"

if_macro: "<<" "if" _expression ">>" body elseif_macro* else_macro? "<</if>>"
elseif_macro: "<<" "elseif" _expression ">>" body
else_macro: "<<" "else" ">>" body

_callable_macros: set_macro | custom_widget | level_call | function_call
_wrap_macros: widget_macro

custom_widget: WIDGET_NAME
set_macro: "set" _variable "to" _expression
widget_macro: "widget" ("\"" WIDGET_NAME "\""  | "'" WIDGET_NAME "'") -> widget
level_call: LEVEL_CALL_NAME "(" _arguments? ")"

LEVEL_CALL_NAME: "level" "." WORD
WIDGET_NAME:  /[a-zA-Z-]+/

_expression: wrapped_expression | _raw_expression

wrapped_expression: "(" _raw_expression ")"
_raw_expression: \
    ESCAPED_STRING 
    | binary_comparison
    | unary_op_expression
    | NUMBER
    | level_call
    | _boolean 
    | _variable 
    | function_call
    | object_literal

_boolean: TRUE | FALSE
_variable: global_var | local_var

global_var : "$" VAR_NAME
local_var : "_" VAR_NAME

VAR_NAME: WORD ("." WORD)*

function_call: _function_name "(" _arguments? ")"
_function_name: FUNCTION_NAME

FUNCTION_NAME: /[a-zA-Z_]+/

_arguments: _argument ("," _argument)*
_argument: _expression

link: "[[" LINK_TEXT (("->" | "|") LINK_TARGET)? "]]"
LINK_TEXT: /(?:(?!(\]\]|\|)).)+/
LINK_TARGET: /(?:(?!\]\]).)+/
text: TEXT
TEXT: /(?:(?!(\[\[|<<)).)+/

// basic js grammar
object_literal: _LBRACE [pair ("," pair)* ","?] _RBRACE
pair: _key ":" _js_value
_key: ESCAPED_STRING | WORD
_js_value: ESCAPED_STRING | NUMBER | object_literal | array | TRUE | FALSE | NULL | UNDEFINED
array: "[" [_js_value ("," _js_value)*] "]"
_LBRACE: "{"
_RBRACE: "}"

unary_op_expression: _unary_op _expression
binary_comparison: _expression _binary_op _expression

_binary_op: \
    STRICT_EQ 
    | STRICT_NEQ 
    | EQUIV 
    | NEQUIV
    | GT 
    | GTE 
    | LT 
    | LTE      
    | AND 
    | OR

_unary_op: \
    NOT 
    | DEF 
    | NDEF

// Equality operators
STRICT_EQ: "is" | "==="
STRICT_NEQ: "isnot" | "!=="
EQUIV: "eq" | "=="
NEQUIV: "neq" | "!="

// Relational operators
GT: "gt" | ">"
GTE: "gte" | ">="
LT: "lt" | "<"
LTE: "lte" | "<="

// Logical operators
NOT: "not" | "!"
AND: "and" | "&&"
OR: "or" | "||"

// Definition operators (SugarCube-specific)
DEF: "def"
NDEF: "ndef"

TRUE: "true"
FALSE: "false"
NULL: "null"
UNDEFINED: "undefined"

_WORD: WORD
ESCAPED_STRING : "'" _STRING_ESC_INNER "'" | "\"" _STRING_ESC_INNER "\""

%import common.WS
%import common.WORD
%import common.NUMBER
%import common._STRING_ESC_INNER
%ignore WS
